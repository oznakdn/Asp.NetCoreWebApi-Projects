// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SingerSong.Persistence.Contexts;

#nullable disable

namespace SingerSong.Persistence.Migrations
{
    [DbContext(typeof(SingerSongDbContext))]
    [Migration("20230621123529_UpdateEntity")]
    partial class UpdateEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("SingerSong.Domain.Entities.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AlbumName")
                        .HasColumnType("TEXT");

                    b.Property<string>("CoverPhoto")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SingerID")
                        .HasColumnType("TEXT");

                    b.Property<int>("SongCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SingerID");

                    b.ToTable("Albums");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68ed7234-494e-44e3-bce5-dd5322326a65"),
                            AlbumName = "Load",
                            CreatedDate = new DateTime(2023, 6, 21, 15, 35, 28, 967, DateTimeKind.Local).AddTicks(5997),
                            IsActive = false,
                            SingerID = new Guid("ee841df3-532c-4a78-8dfd-9c3eac5c1d4e"),
                            SongCount = 14
                        });
                });

            modelBuilder.Entity("SingerSong.Domain.Entities.Singer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<int>("MusicStyle")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SingerAbout")
                        .HasColumnType("TEXT");

                    b.Property<string>("SingerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SingerPhoto")
                        .HasColumnType("TEXT");

                    b.Property<int>("SingerType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SingerName")
                        .IsUnique();

                    b.ToTable("Singers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ee841df3-532c-4a78-8dfd-9c3eac5c1d4e"),
                            CreatedDate = new DateTime(2023, 6, 21, 15, 35, 28, 967, DateTimeKind.Local).AddTicks(4934),
                            IsActive = false,
                            Location = "USA",
                            MusicStyle = 16,
                            SingerAbout = "Metallica is an American heavy metal band. The band was formed in 1981 in Los Angeles by vocalist and guitarist James Hetfield and drummer Lars Ulrich, and has been based in San Francisco for most of its career.",
                            SingerName = "Metallica",
                            SingerType = 1
                        });
                });

            modelBuilder.Entity("SingerSong.Domain.Entities.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AlbumID")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SongName")
                        .HasColumnType("TEXT");

                    b.Property<float>("SongWeight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("AlbumID");

                    b.ToTable("Songs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("54fa52b2-893d-4603-954f-348a12ad98b2"),
                            AlbumID = new Guid("68ed7234-494e-44e3-bce5-dd5322326a65"),
                            IsActive = false,
                            SongName = "Wasting my hate",
                            SongWeight = 3.57f
                        });
                });

            modelBuilder.Entity("SingerSong.Domain.Identities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleTitle")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleTitle")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("279b1e39-aca5-44db-aacb-ecd57ae4831e"),
                            Description = "This role is for standard users.",
                            IsActive = false,
                            RoleTitle = "User"
                        });
                });

            modelBuilder.Entity("SingerSong.Domain.Identities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RoleID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TokenExpiredTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a82361b-7fe1-4155-a220-5a637fc60b46"),
                            Email = "johndoe@mail.com",
                            IsActive = false,
                            Password = "john123",
                            RoleID = new Guid("279b1e39-aca5-44db-aacb-ecd57ae4831e")
                        });
                });

            modelBuilder.Entity("SingerSong.Domain.Entities.Album", b =>
                {
                    b.HasOne("SingerSong.Domain.Entities.Singer", "Singer")
                        .WithMany("Albums")
                        .HasForeignKey("SingerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Singer");
                });

            modelBuilder.Entity("SingerSong.Domain.Entities.Song", b =>
                {
                    b.HasOne("SingerSong.Domain.Entities.Album", "Album")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("SingerSong.Domain.Identities.User", b =>
                {
                    b.HasOne("SingerSong.Domain.Identities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SingerSong.Domain.Entities.Album", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("SingerSong.Domain.Entities.Singer", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("SingerSong.Domain.Identities.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
